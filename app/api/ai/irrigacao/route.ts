import OpenAI from "openai"
import { NextResponse } from "next/server"
import { calcularETo, gerarBaseIrrigacao } from "@/functions/calcIrrigacao"

const client = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY!,
})

export async function POST(req: Request) {
    try {
        // 1Ô∏è‚É£ l√™ dados do corpo da requisi√ß√£o
        const body = await req.json()
        const {
            kc,
            tmax,
            tmin,
            rh,
            u2,
            Rs,
            latitude,
            longitude,
            altitude,
            area_m2,
            dayOfYear
        } = body

        // 2Ô∏è‚É£ valida√ß√£o simples
        if ([kc, tmax, tmin, rh, u2, Rs, latitude, altitude, area_m2].some(v => v === undefined)) {
            return NextResponse.json({ error: "Par√¢metros insuficientes" }, { status: 400 })
        }

        // 3Ô∏è‚É£ c√°lculo do ETo (Penman-Monteith FAO-56)
        const eto = calcularETo({
            tmax,
            tmin,
            rh,
            u2,
            Rs,
            altitude,
            latitude,
            dayOfYear
        })

        // 4Ô∏è‚É£ base de irriga√ß√£o (ETc = ETo * Kc)
        const base = gerarBaseIrrigacao(kc, eto, area_m2)

        // 5Ô∏è‚É£ prompt com dados formatados
        const prompt = `
Voc√™ √© uma IA agron√¥mica do AgroFlux üå±
Com base nesses dados, gere uma recomenda√ß√£o simples para o produtor:

Latitude: ${latitude}
Altitude: ${altitude} m
Kc: ${kc}
ETo: ${eto} mm/dia
√Årea: ${area_m2} m¬≤
Previs√£o de irriga√ß√£o:
- Hoje: ${base.hoje.liters.toFixed(0)} L (${base.hoje.mm.toFixed(2)} mm)
- 7 dias: ${base.dias7.liters.toFixed(0)} L
- 30 dias: ${base.dias30.liters.toFixed(0)} L
- 6 meses: ${base.meses6.liters.toFixed(0)} L

D√™ sugest√µes pr√°ticas (quando irrigar, se deve reduzir/aumentar, etc.)
Responda de forma curta, objetiva e em portugu√™s do Brasil.
`

        // 6Ô∏è‚É£ gera recomenda√ß√£o via OpenAI
        const completion = await client.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "system", content: "Voc√™ √© uma IA agr√≠cola especializada em irriga√ß√£o eficiente e manejo h√≠drico." },
                { role: "user", content: prompt }
            ],
            temperature: 0.4
        })

        const recomendacao = completion.choices[0].message.content

        // 7Ô∏è‚É£ resposta final
        return NextResponse.json({
            kc,
            eto,
            base,
            recomendacao
        })
    } catch (error: any) {
        console.error("Erro na rota /api/ai/irrigacao:", error)
        return NextResponse.json(
            { error: "Falha ao processar solicita√ß√£o", detalhe: error?.message },
            { status: 500 }
        )
    }
}
